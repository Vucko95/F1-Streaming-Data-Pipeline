version: '3'
services:

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: superset
      POSTGRES_PASSWORD: superset_password
      POSTGRES_DB: superset_db
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  nifi:
  #  NIFI CONNECTION URL https://localhost:8443/nifi/login
    image: apache/nifi:1.27.0
    container_name: nifi
    ports:
      - 8443:8443
      - 8444:8444
      - 20888:20888/udp
    environment:
      NIFI_WEB_HTTPS_HOST: 0.0.0.0
      NIFI_WEB_HTTPS_PORT: 8443
      SINGLE_USER_CREDENTIALS_USERNAME: nifi_user
      SINGLE_USER_CREDENTIALS_PASSWORD: nifi_pass2332s!
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
    volumes:
      - ./nifi_data:/opt/nifi/nifi-current/data
      - ./containers/nifi/postgresql-42.3.9.jar:/opt/nifi/nifi-current/lib/postgresql-42.3.9.jar 

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.6.2
    ports:
      - 9092:9092
    environment:
      - KAFKA_CFG_NODE_ID=1  
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,INTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,INTERNAL://kafka:9094
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper

  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:3.9.2
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: "Kafka_Container"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9094
    depends_on:
      - kafka

  spark-master:
    image: bitnami/spark:3.5.3
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=yes
      - SPARK_RPC_AUTHENTICATION_SECRET=my-secret
      - SPARK_RPC_ENCRYPTION=yes
      - SPARK_LOCAL_STORAGE_ENCRYPTION=yes
    ports:
      - "8080:8080" # Spark Web UI
      - "7077:7077" # Spark Master Port
    volumes:
      - ./spark-config:/opt/bitnami/spark/conf
      - ./spark-data:/bitnami/spark

# ws://ws-python:3001
  grafana:
    container_name: grafana
    image: grafana/grafana:9.5.14
    ports:
      - 3000:3000
    # volumes:
    #   - "./grafana.ini:/etc/grafana/grafana.ini"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
# TODO: Add Dynamic Datasource to Dashboard

  ws-python:
    container_name: ws-python
    build:
      context: containers/ws-python
      dockerfile: Dockerfile.ws-python 
    ports:
      - 3001:3001  
    depends_on:
      - kafka 

  superset:
      build:
        context: containers/superset
        dockerfile: Dockerfile
      container_name: superset
      environment:
        - ADMIN_USERNAME=admin
        - ADMIN_PASSWORD=admin
        - ADMIN_EMAIL=admin@superset.com
        - SUPERSET_DATABASE_URI=postgresql://superset:superset_password@postgres:5432/superset_db

      ports:
        - 8088:8088
      depends_on:
        - postgres

  # telemetry-receiver:
  #   container_name: telemetry-receiver
  #   build:
  #     context: containers/udp_receiver
  #     dockerfile: Dockerfile
  #   ports:
  #     - '20777:20777/udp'
networks:
  mynetwork:
volumes:
  postgres_data: